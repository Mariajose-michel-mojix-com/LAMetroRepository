(function () {
    
  /***********************************************************
    Decipher Rule - 04-24-2020
    Check in the event array the priority 
    SET and Clear events
    **************************************************************/
    //include the Utils LIB, common functions and variables will be available to use in the JS rule
    load("UTILS");
    logHeader = 'Decipher Event from Station';
    gLogState = true;

    // START log of rule
    printLog("======================================= " + logHeader + "=============================================");
    
    var eventArray = getUDFvalue("EventArray");
    //Parse the event array udf's, by default if the value is null or empty it will assign the appropiate value
    if(!eventArray){    
      eventArray = [];
    } else {
      eventArray =  JSON.parse(eventArray);
    }

    //This will update the dispatch UDFs from the highest Priority Event in the array.
    if(source === "DISPATCHRULE" && eventArray.length !== 0){
        var tvmDispatched = findDispatch(eventArray);
        updateStation(tvmDispatched);
        return false;
    }

    //prevent others sources interact with the rule (Source should come as TVMEVENTSFTPRULE from TVM EVENTS rule)
    if(source !== "TVMEVENTSFTPRULE"){
        return false;
    }
    var eventProps = getUDFvalue("TVM_Props") || "";

    //check if event already exits
    if (!!eventProps) {
        eventProps = JSON.parse(eventProps);
       //Validates that a valid event execute the rule
        if (eventProps.hasOwnProperty("eventType")) {

            var eventCodethingProps = getEventCodeThing(eventProps.eventCode);
            var newEvent = eventProps.messageId + ":" + eventProps.eventCode + ":" + eventCodethingProps.EventPriority;
            
             /***********************************************************
                Use case 1: check if event type is a SET message
                if so, Validates if the event is a new event otherwise do nothing
                if is a new event then validates the priority in the array list 
             **************************************************************/
             
            if (eventProps.eventType === "SET") {
                // Event in Array format : ["msgid:eventCode:priority"]
                if (eventArray.indexOf(newEvent) === -1) {                    
                    eventArray.push(newEvent);
                    var highestPrioity = findPriority(eventArray);
                    if (newEvent === highestPrioity) {
                        updateStation(eventCodethingProps, eventArray)
                    } else {
                        appendUDF('EventArray', JSON.stringify(eventArray));
                        PropertySetter(UDFS);
                    }
                } else {
                    return false;
                }

                //    //get info from the EventCodes with highest priority

            } else if (eventProps.eventType === "CLEAR") {
                
                /***********************************************************
                    Use case 2: check if event type is a Clear message
                    if so, Validates if the event is in the current event list otherwise do nothing
                    if is in the list the event is removed from the list and the next element
                     with the highest priority in the array list is finded
                **************************************************************/
                
                var index = eventArray.indexOf(newEvent);
                if (index >= 0) {
                    eventArray.splice(index,1);
                    var highestPrioity = "";
                    var nextEventCode = "";
                    var nextMessageId = ""; // Aleman
                    if(eventArray.length !== 0){
                    highestPrioity = findPriority(eventArray);
                    nextEventCode = highestPrioity.split(":")[1];
                    // nextMessageId = highestPrioity.split(":")[0]; // Aleman
                    }
                    eventCodethingProps = getEventCodeThing(nextEventCode);
                    var tvmDispatched = findDispatch(eventArray);
                    eventCodethingProps = mergeObjs(eventCodethingProps, tvmDispatched);
                    /***********************************************************
                    Use case 3: especial Rule for  a Clear message
                    if the event has an event code = 140 and is the last element in the array list
                    an especial flag will be set to true
                    **************************************************************/
                
                    if(eventProps.eventCode == "140" && eventArray.length === 0){
                        delete eventCodethingProps.EventDescription;
                        delete eventCodethingProps.EventImpact;
                        delete eventCodethingProps.EventComponent;
                        delete eventCodethingProps.EventCode;
                        delete eventCodethingProps.EventPriority;
                        eventCodethingProps.SpecialCase = true;
                    }
                    updateStation(eventCodethingProps, eventArray)

                } else {
                    return false;
                }


            }
        }
    }

    // getEventCodeThing ::: This function will get the events UDFs values from EVENTCODES Thing Type on ViZix.
    function getEventCodeThing(eventCode) {
        var eventObj = {
            EventDescription:"",
            EventImpact:"",
            EventPriority:"",
            EventCode:"",
            EventComponent:"",
            SpecialCase:false
        }
        // printLog("getEventCodeThing ::: "+ eventCode);
        if(!eventCode){
            return eventObj;
        }

        var eventThing = GetThingByThingTypeCode("EVENTCODES", eventCode) || "";
        eventObj.EventDescription= eventThing.getUdf("Description") || "";
        eventObj.EventImpact= eventThing.getUdf("Impact") || "";
        eventObj.EventPriority= eventThing.getUdf("Priority") || "";
        eventObj.EventCode= eventCode  || "";
        eventObj.EventComponent= eventThing.getUdf("ComponentDescription") || "";
        return eventObj;

    }

    // findDispatch ::: This function will append only the dispatch UDFs to be updated.
    function findDispatch(eventArray){
        eventArray = eventArray.map(function (element){
            return element.split(":")
        }).sort(sortArryByPiority);

        var tvmObj = {
            Dispatch:false,
            DispatchedAssociate:"",
            DispatchStatus:"UNASSIGNED"
        };

        for(var i in eventArray){
         var messageId = eventArray[i][0];
         if(messageId){
            var tvmThing = GetThingByThingTypeCode("TVMEVENTS", messageId) || "";
            tvmObj.Dispatch = tvmThing.getUdf("Dispatch") || false;
            tvmObj.DispatchedAssociate = tvmThing.getUdf("DispatchedAssociate") || "";
            tvmObj.DispatchStatus = tvmThing.getUdf("DispatchStatus") || "UNASSIGNED";
            if(tvmObj.Dispatch === "true"){
                return tvmObj;
            }
        }
        }
        return tvmObj;
    }

    // updateStation ::: This function will update the Station thing type with the event with the highest priority on EventArray UDF.
    function updateStation(highestPrioity, eventArray) {
        if(eventArray){
            appendUDF('EventArray', JSON.stringify(eventArray));
        }
        //Appends all properties from the highest priority event found in the eventArray.
        var highestPrioityKeys = Object.keys(highestPrioity);
        highestPrioityKeys.forEach(function (property){
            appendUDF(property, highestPrioity[property]);
        });
        PropertySetter(UDFS);
    }


    //the function will search for the event with the highest priority and return the element
    function findPriority (array){
        return array.map(function (element){
            return element.split(":")
            }).sort(sortArryByPiority)[0].join(":");
    } // Will Return Always the lowest priority.
    
    function sortArryByPiority (a,b){
        var tempA = a[2];
        var tempB = b[2];
        if(tempA==0){tempA=4}
        if(tempB==0){tempB=4}
        return tempA-tempB;
    }

    // mergeObjs ::: Will merge 2 objects.
    function mergeObjs(a,b){
        keys = Object.keys(b);
        keys.forEach(function(key){
           a[key] = b[key];
        })
        return a;
    }
}
)();
